[runtime]
; The emcee sampler, which uses the Goodman & Weare algorithm.
; sampler = emcee
; sampler = minuit
sampler = maxlike

; Right now only the emcee sampler supports this feature:
; resuming a chain directly where it left off.
; resume = T

; [emcee]
; ; The emcee sampler uses the concept of walkers, a collection of live
; ; points.  Sampling is done along lines that connect pairs of walkers.
; ; The number of walkers must be at least 2*nparam + 1, but in general more
; ; than that usually works better.
; walkers = 64
; ; This many samples is overkill, just to make the plots look a lot nicer.
; samples = 400
; ; This is the interval at which convergence diagnostics are performed.
; nsteps = 100

; [minuit]
; verbose=T
; ; tolerance in log-like required, in milliSigmas.
; ; i.e. if tolerance=1.0 then the expected distance from the maximum (EDM)
; ; in chi^2 will be 1e-3.
; ; This will try to get within a 0.05 sigma.
; tolerance = 50.0

; ;save an ini file starting from the best-fit point
; output_ini = minuit_output.ini

; ; Save the cosmology info in this directory
; save_dir=minuit_sample

; ; Minimization strategy
; strategy = medium
; ; You can also try:
; ; strategy = fast
; ; to try to converge as fast as possible
; ; but with more chance of missing the best-fit
; ; strategy = safe
; ; to converge more slowly but with less
; ; chance of missing the best-fit


; ; Minimization algorithm
; algorithm = migrad
; ;you can also try:
; ; strategy = simplex
; ; To use the simplex algorithm instead of
; ; mingrad.  This is usually worse but can
; ; occasionaly help for problems with
; ; extremely badly behaved derivatives of
; ; the likelihood

; ; strategy = fallback
; ; To try mingrad but fall back to simplex
; ; if it fails.

; ; max number of function evaluations (per core) per run.
; ; leave this as zero to use the default, which is 200 + 100 * npar + 5 * npar**2
; ; This demo should take 500 - 600 iterations with the default settings.
; ; This limit is approximate - don't be surprised if it actually does a few more than this.
; maxiter = 1000

; ; This is a very approximate estimate of parameter std. devs.
; ; as a fraction of the parameter ranges. It helps speed convergence if
; ; it is more accurate
; width_estimate = 0.05

; ; save the covariance matrix here
; save_cov = minuit_covmat.txt

[maxlike]
maxiter = 1000
tolerance = 0.01
output_ini = maxlike_bestfit.ini

[pipeline]
modules = cppt_sample modified_class planck
values = cppt_sample/values.ini
extra_output = twopf_observables/k_piv twopf_observables/A_s twopf_observables/A_t twopf_observables/n_s twopf_observables/n_t twopf_observables/r thrpf_observables/B_equi thrpf_observables/fNL_equi thrpf_observables/B_squ thrpf_observables/fNL_squ wavenumber_spectrum/spec_table failed_samples/no_end_inflation failed_samples/negative_Hsq failed_samples/integrate_nan failed_samples/zero_massless_time failed_samples/negative_epsilon failed_samples/eps_geq_three failed_samples/negative_pot failed_samples/noFind_hor_exit failed_samples/ICs_before_start failed_samples/leq_60_efolds failed_samples/varying_Spec

; We are now asking for some likelihoods at the end of the pipeline.  When doing
; MCMC this line specified the likelihoods to use for the acceptance.  Otherwise
; it just gets printed out.
likelihoods = planck2015
quiet=F
debug=T
timing=T

[output]
format = text
filename = cppt_sample_output.txt
verbosity = debug

[planck]
file = cosmosis-standard-library/likelihood/planck2015/planck_interface.so
; The Planck module has some file paths it needs setting.  These files can all
; be downloaded from the Planck archives.
data_1 = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/likelihood/planck2015/data/plik_lite_v18_TT.clik
data_2 = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/likelihood/planck2015/data/commander_rc2_v1.1_l2_29_B.clik

[modified_class]
file = class-modified/class_interface.py
lmax = 2508

[cppt_sample]
file = modules/cppt_module/cppt_sample/cppt_sample/build/libcppt_sample.so
M_P = 1.0
k_samples = 250
